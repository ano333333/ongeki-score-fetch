name: github actions on pull-request to master

on:
    pull_request:
        branches:
            - "master"

permissions:
    contents: read
    pull-requests: write

jobs:
    updated-files-check:
        uses: ./.github/workflows/sub-updated-files-check.yaml

    chrome-extension-build:
        outputs:
            is-success: ${{steps.install-dependencies-and-build.outcome}} # 'success' or 'failure'
        needs:
            - updated-files-check
        if: ${{needs.updated-files-check.outputs.chrome-extension-updated == 'true'}}
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./chrome-extension
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "21"

            - name: "Add env"
              env:
                  VITE_BEATMAP_DATA_SOURCE_URL: ${{secrets.CHROME_EXTENSION_BEATMAP_DATA_SOURCE_URL_STG}}
              run: |
                  echo "VITE_BEATMAP_DATA_SOURCE_URL=\"$VITE_BEATMAP_DATA_SOURCE_URL\"" >> .env

            - name: Install dependencies and build
              id: install-dependencies-and-build
              run: |
                  npm install
                  npm run build

    chrome-extension-test:
        runs-on: ubuntu-latest
        outputs:
            is-success: ${{steps.test.outcome}} # 'success' or 'failure'
        needs:
            - updated-files-check
        if: ${{needs.updated-files-check.outputs.chrome-extension-updated == 'true'}}
        permissions:
            id-token: write
            contents: read
        defaults:
            run:
                working-directory: ./chrome-extension
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: "Install dependencies"
              run: |
                  npm install

            - name: "Install Playwright Browsers"
              run: npx playwright install --with-deps

            - name: "Add Env"
              env:
                  VITE_BEATMAP_DATA_SOURCE_URL: ${{secrets.CHROME_EXTENSION_BEATMAP_DATA_SOURCE_URL_STG}}
              run: |
                  echo "VITE_BEATMAP_DATA_SOURCE_URL=\"$VITE_BEATMAP_DATA_SOURCE_URL\"" >> .env

            - name: "Test"
              id: "test"
              run: |
                  npm run test:ci

    plan-stg:
        outputs:
            is-success: ${{steps.plan.outcome}} # 'success' or 'failure'
        needs:
            - updated-files-check
        if: ${{needs.updated-files-check.outputs.gcp-updated == 'true'}}
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./gcp
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - uses: hashicorp/setup-terraform@v3

            - id: "gcp-auth"
              name: "Authenticate to GCP"
              uses: "google-GitHub-actions/auth@v1"
              with:
                  create_credentials_file: true
                  workload_identity_provider: ${{secrets.WORKLOAD_IDENTITY_PROVIDER}}
                  service_account: ${{secrets.SERVICE_ACCOUNT_EMAIL}}

            - name: "Activate GCP Service Account"
              run: |
                  gcloud auth login --cred-file=$GOOGLE_APPLICATION_CREDENTIALS

            - name: "Configure Docker to use GCP Artifact Registry"
              run: |
                  gcloud auth configure-docker ${{secrets.REGION}}-docker.pkg.dev

            - name: "Download stg.tfstate"
              run: |
                  gsutil cp gs://${{secrets.TERRAFORM_TFSTATE_BUCKET}}/stg.tfstate ./terraform.tfstate

            - name: "Copy variables.tf"
              env:
                  PROJECT_ID: ${{secrets.PROJECT_ID}}
                  REGION: ${{secrets.REGION}}
                  ENV: "stg"
                  SHEET_SCRAPER_SCHEDULE: ${{secrets.SHEET_SCRAPER_SCHEDULE_STG}}
              run: |
                  echo "project_id = \"$PROJECT_ID\"" > ./terraform.tfvars
                  echo "region = \"$REGION\"" >> ./terraform.tfvars
                  echo "env = \"$ENV\"" >> ./terraform.tfvars
                  echo "sega_user_name = \"$SEGA_USER_NAME\"" >> ./terraform.tfvars
                  echo "sega_password = \"$SEGA_PASSWORD\"" >> ./terraform.tfvars
                  echo "spread_sheet_id = \"$SPREAD_SHEET_ID\"" >> ./terraform.tfvars
                  echo "sheet_storage_name = \"$SHEET_STORAGE_NAME_STG\"" >> ./terraform.tfvars
                  echo "current_ongeki_version_name = \"$CURRENT_ONGEKI_VERSION_NAME\"" >> ./terraform.tfvars
                  echo "sheet_scraper_schedule = \"$SHEET_SCRAPER_SCHEDULE\"" >> ./terraform.tfvars
            - name: "Plan"
              id: "plan"
              run: |
                  terraform init
                  terraform plan

    sheet-scraper-test:
        outputs:
            is-success: ${{steps.test.outcome}} # 'success' or 'failure'
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-latest
        needs:
            - updated-files-check
        if: ${{needs.updated-files-check.outputs.gcp-updated == 'true'}}
        defaults:
            run:
                working-directory: ./gcp/sheet-scraper
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "22"

            - uses: pnpm/action-setup@v4
              with:
                  version: 10.10.0

            - name: "Install dependencies"
              run: |
                  pnpm install

            - name: "Create .env"
              env:
                  SEGA_USER_NAME: ${{secrets.SEGA_USER_NAME}}
                  SEGA_PASSWORD: ${{secrets.SEGA_PASSWORD}}
                  SPREAD_SHEET_ID: ${{secrets.SPREAD_SHEET_ID}}
                  CURRENT_ONGEKI_VERSION_NAME: ${{secrets.CURRENT_ONGEKI_VERSION_NAME}}
              run: |
                  echo "SEGA_USER_NAME=\"$SEGA_USER_NAME\"" > .env
                  echo "SEGA_PASSWORD=\"$SEGA_PASSWORD\"" >> .env
                  echo "SPREAD_SHEET_ID=\"$SPREAD_SHEET_ID\"" >> .env
                  echo "SHEET_STORAGE_NAME=\"\"" >> .env
                  echo "CURRENT_ONGEKI_VERSION_NAME=\"$CURRENT_ONGEKI_VERSION_NAME\"" >> .env
            - name: "Test"
              id: "test"
              run: |
                  pnpm test

    add-comment-to-pr:
        runs-on: ubuntu-latest
        needs:
            - updated-files-check
            - chrome-extension-build
            - chrome-extension-test
            - plan-stg
            - sheet-scraper-test
        if: always()
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        steps:
            # 全てのジョブの成否を出力する
            - name: "Judge If All Jobs Succeeded"
              id: "judge-if-all-jobs-succeeded"
              run: |
                  echo "chrome-extension-build: ${{needs.chrome-extension-build.outputs.is-success}}"
                  echo "chrome-extension-test: ${{needs.chrome-extension-test.outputs.is-success}}"
                  echo "plan-stg: ${{needs.plan-stg.outputs.is-success}}"
                  echo "sheet-scraper-test: ${{needs.sheet-scraper-test.outputs.is-success}}"
                  ce_updated="${{needs.updated-files-check.outputs.chrome-extension-updated}}"
                  gcp_updated="${{needs.updated-files-check.outputs.gcp-updated}}"
                  ce_build_suc="${{needs.chrome-extension-build.outputs.is-success}}"
                  ce_test_suc="${{needs.chrome-extension-test.outputs.is-success}}"
                  gcp_plan_suc="${{needs.plan-stg.outputs.is-success}}"
                  gcp_sheet_scraper_suc="${{needs.sheet-scraper-test.outputs.is-success}}"
                  if [[ 
                      ( "$ce_updated" != "true" || "$ce_build_suc" == "success" ) && 
                      ( "$ce_updated" != "true" || "$ce_test_suc" == "success" ) && 
                      ( "$gcp_updated" != "true" || "$gcp_plan_suc" == "success" ) && 
                      ( "$gcp_updated" != "true" || "$gcp_sheet_scraper_suc" == "success" ) 
                  ]]; then
                      echo "ALL_JOBS_SUCCEEDED=true" >> $GITHUB_ENV
                  else
                      echo "ALL_JOBS_SUCCEEDED=false" >> $GITHUB_ENV
                  fi

            - name: "Create Comment Body File For Success"
              if: ${{env.ALL_JOBS_SUCCEEDED == 'true'}}
              run: |
                  echo "ALL_JOBS_SUCCEEDED: ${{env.ALL_JOBS_SUCCEEDED}}"
                  cat << EOF > pr_comment.md
                  ## PR Test Pipeline Success
                  Github Actions Log: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
                  EOF

            - name: "Create Comment Body File For Failure"
              if: ${{env.ALL_JOBS_SUCCEEDED == 'false'}}
              run: |
                  echo "ALL_JOBS_SUCCEEDED: ${{env.ALL_JOBS_SUCCEEDED}}"
                  cat << EOF > pr_comment.md
                  ## PR Test Pipeline Failed
                  Github Actions Log: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
                  EOF

            - name: "Add Comment To PR"
              if: always()
              run: |
                  cat pr_comment.md
                  gh pr comment --body-file pr_comment.md "${{github.event.pull_request.html_url}}"
