name: github actions on pull-request to master

on:
    pull_request:
        branches:
            - "master"

permissions:
    contents: read
    pull-requests: write

jobs:
    updated-files-check:
        uses: ./.github/workflows/sub-updated-files-check.yaml

    chrome-extension-build:
        outputs:
            is-success: ${{steps.build.outputs.is-success}}
        needs:
            - updated-files-check
        if: ${{needs.updated-files-check.outputs.chrome-extension-updated == 'true'}}
        runs-on: ubuntu-24.04
        container:
            image: ghcr.io/ano333333/ongeki-score-fetch/node:24.04
            credentials:
                username: ${{ github.actor }}
                password: ${{ secrets.CR_PAT }}
        defaults:
            run:
                working-directory: ./chrome-extension
        permissions:
            id-token: write
            contents: read
        steps:
            - uses: actions/checkout@v4

            - name: create .env
              run: |
                  echo "VITE_BEATMAP_DATA_BUCKET_URL=\"${{ secrets.CHROME_EXTENSION_BEATMAP_DATA_BUCKET_URL_STG }}\"" > .env

            - uses: ./.github/workflows/build-chromeex/
              id: build

    chrome-extension-test:
        outputs:
            is-success: ${{steps.test.outputs.is-success}} # 'success' or 'failure'
        needs:
            - updated-files-check
        if: ${{needs.updated-files-check.outputs.chrome-extension-updated == 'true'}}
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-24.04
        container:
            image: ghcr.io/ano333333/ongeki-score-fetch/playwright:24.04
            credentials:
                username: ${{ github.actor }}
                password: ${{ secrets.CR_PAT }}
        defaults:
            run:
                working-directory: ./chrome-extension
        steps:
            - uses: actions/checkout@v4

            - name: create .env
              run: |
                  echo "VITE_BEATMAP_DATA_BUCKET_URL=\"${{ secrets.CHROME_EXTENSION_BEATMAP_DATA_BUCKET_URL_STG }}\"" > .env

            - uses: ./.github/workflows/test-chromeex/
              id: test

    plan-stg:
        outputs:
            is-success: ${{steps.plan.outcome}} # 'success' or 'failure'
        needs:
            - updated-files-check
        if: ${{needs.updated-files-check.outputs.gcp-updated == 'true'}}
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-24.04
        defaults:
            run:
                working-directory: ./gcp
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - name: "Setup Terraform"
              uses: hashicorp/setup-terraform@v3

            - name: "Setup Google Cloud CLI"
              uses: google-github-actions/setup-gcloud@v2

            - uses: ./.github/workflows/setup-gcp-auth/
              with:
                  workload-identity-provider: ${{secrets.WORKLOAD_IDENTITY_PROVIDER}}
                  service-account-email: ${{secrets.SERVICE_ACCOUNT_EMAIL}}
                  region: ${{secrets.REGION}}

            - name: "Copy variables.tf"
              run: |
                  echo "project_id=\"${{ secrets.PROJECT_ID }}\"" > ./terraform.tfvars
                  echo "region=\"${{ secrets.REGION }}\"" >> ./terraform.tfvars
                  echo "env=\"stg\"" >> ./terraform.tfvars
                  echo "sega_user_name=\"${{ secrets.SEGA_USER_NAME }}\"" >> ./terraform.tfvars
                  echo "sega_password=\"${{ secrets.SEGA_PASSWORD }}\"" >> ./terraform.tfvars
                  echo "spread_sheet_id=\"${{ secrets.SPREAD_SHEET_ID }}\"" >> ./terraform.tfvars
                  echo "current_ongeki_version_name=\"${{ secrets.CURRENT_ONGEKI_VERSION_NAME }}\"" >> ./terraform.tfvars
                  echo "sheet_scraper_schedule=\"${{ secrets.SHEET_SCRAPER_SCHEDULE_STG }}\"" >> ./terraform.tfvars

            - uses: ./.github/workflows/plan-terraform/
              id: "plan"
              with:
                  terraform-tfstate-bucket: ${{secrets.TERRAFORM_TFSTATE_BUCKET}}

    sheet-scraper-test:
        outputs:
            is-success: ${{steps.test.outcome}} # 'success' or 'failure'
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-24.04
        needs:
            - updated-files-check
        if: ${{needs.updated-files-check.outputs.gcp-updated == 'true'}}
        defaults:
            run:
                working-directory: ./gcp/sheet-scraper
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - name: "Create .env"
              run: |
                  echo "SEGA_USER_NAME=\"${{secrets.SEGA_USER_NAME}}\"" > .env
                  echo "SEGA_PASSWORD=\"${{secrets.SEGA_PASSWORD}}\"" >> .env
                  echo "SPREAD_SHEET_ID=\"${{secrets.SPREAD_SHEET_ID}}\"" >> .env
                  echo "SHEET_STORAGE_NAME=\"${{secrets.SHEET_STORAGE_NAME_STG}}\"" >> .env
                  echo "CURRENT_ONGEKI_VERSION_NAME=\"${{secrets.CURRENT_ONGEKI_VERSION_NAME}}\"" >> .env

            - uses: ./.github/workflows/test-sheet-scraper/
              id: test

    add-comment-to-pr:
        runs-on: ubuntu-24.04
        needs:
            - updated-files-check
            - chrome-extension-build
            - chrome-extension-test
            - plan-stg
            - sheet-scraper-test
        if: always()
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        steps:
            # 全てのジョブの成否を出力する
            - name: "Judge If All Jobs Succeeded"
              id: "judge-if-all-jobs-succeeded"
              run: |
                  echo "chrome-extension-build: ${{needs.chrome-extension-build.outputs.is-success}}"
                  echo "chrome-extension-test: ${{needs.chrome-extension-test.outputs.is-success}}"
                  echo "plan-stg: ${{needs.plan-stg.outputs.is-success}}"
                  echo "sheet-scraper-test: ${{needs.sheet-scraper-test.outputs.is-success}}"
                  ce_updated="${{needs.updated-files-check.outputs.chrome-extension-updated}}"
                  gcp_updated="${{needs.updated-files-check.outputs.gcp-updated}}"
                  ce_build_suc="${{needs.chrome-extension-build.outputs.is-success}}"
                  ce_test_suc="${{needs.chrome-extension-test.outputs.is-success}}"
                  gcp_plan_suc="${{needs.plan-stg.outputs.is-success}}"
                  gcp_sheet_scraper_suc="${{needs.sheet-scraper-test.outputs.is-success}}"
                  if [[ 
                      ( "$ce_updated" != "true" || "$ce_build_suc" == "success" ) && 
                      ( "$ce_updated" != "true" || "$ce_test_suc" == "success" ) && 
                      ( "$gcp_updated" != "true" || "$gcp_plan_suc" == "success" ) && 
                      ( "$gcp_updated" != "true" || "$gcp_sheet_scraper_suc" == "success" ) 
                  ]]; then
                      echo "ALL_JOBS_SUCCEEDED=true" >> $GITHUB_ENV
                  else
                      echo "ALL_JOBS_SUCCEEDED=false" >> $GITHUB_ENV
                  fi

            - name: "Create Comment Body File For Success"
              if: ${{env.ALL_JOBS_SUCCEEDED == 'true'}}
              run: |
                  echo "ALL_JOBS_SUCCEEDED: ${{env.ALL_JOBS_SUCCEEDED}}"
                  cat << EOF > pr_comment.md
                  ## PR Test Pipeline Success
                  Github Actions Log: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
                  EOF

            - name: "Create Comment Body File For Failure"
              if: ${{env.ALL_JOBS_SUCCEEDED == 'false'}}
              run: |
                  echo "ALL_JOBS_SUCCEEDED: ${{env.ALL_JOBS_SUCCEEDED}}"
                  cat << EOF > pr_comment.md
                  ## PR Test Pipeline Failed
                  Github Actions Log: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
                  EOF

            - name: "Add Comment To PR"
              if: always()
              run: |
                  cat pr_comment.md
                  gh pr comment --body-file pr_comment.md "${{github.event.pull_request.html_url}}"
