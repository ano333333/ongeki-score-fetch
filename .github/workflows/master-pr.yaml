name: github actions on pull-request to master

on:
    pull_request:
        branches:
            - "master"

permissions:
    contents: read
    pull-requests: write

jobs:
    chrome-extension-build:
        outputs:
            is-success: ${{steps.install-dependencies-and-build.outcome}} # 'success' or 'failure'
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./chrome-extension
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "21"

            - name: Install dependencies and build
              id: install-dependencies-and-build
              run: |
                  npm install
                  npm run build

    gcp-apply-new:
        outputs:
            is-success: ${{steps.apply.outcome}} # 'success' or 'failure'
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./gcp
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - uses: hashicorp/setup-terraform@v3

            - id: "gcp-auth"
              name: "Authenticate to GCP"
              uses: "google-GitHub-actions/auth@v1"
              with:
                  create_credentials_file: true
                  workload_identity_provider: ${{secrets.WORKLOAD_IDENTITY_PROVIDER}}
                  service_account: ${{secrets.SERVICE_ACCOUNT_EMAIL}}

            - name: "Activate GCP Service Account"
              run: |
                  gcloud auth login --cred-file=$GOOGLE_APPLICATION_CREDENTIALS

            - name: "Copy variables.tf"
              env:
                  PROJECT_ID: ${{secrets.PROJECT_ID}}
                  REGION: ${{secrets.REGION}}
                  ENV:
              run: |
                  echo "project_id = \"$PROJECT_ID\"" > ./terraform.tfvars
                  echo "region = \"$REGION\"" >> ./terraform.tfvars
                  echo "env = \"$ENV\"" >> ./terraform.tfvars

            - name: "Apply"
              id: "apply"
              run: |
                  terraform init
                  terraform validate
                  terraform apply -auto-approve

            - name: "Destroy"
              if: always()
              run: |
                  terraform destroy -auto-approve

    plan-stg:
        outputs:
            is-success: ${{steps.plan.outcome}} # 'success' or 'failure'
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./gcp
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - uses: hashicorp/setup-terraform@v3

            - id: "gcp-auth"
              name: "Authenticate to GCP"
              uses: "google-GitHub-actions/auth@v1"
              with:
                  create_credentials_file: true
                  workload_identity_provider: ${{secrets.WORKLOAD_IDENTITY_PROVIDER}}
                  service_account: ${{secrets.SERVICE_ACCOUNT_EMAIL}}

            - name: "Activate GCP Service Account"
              run: |
                  gcloud auth login --cred-file=$GOOGLE_APPLICATION_CREDENTIALS

            - name: "Configure Docker to use GCP Artifact Registry"
              run: |
                  gcloud auth configure-docker ${{secrets.REGION}}-docker.pkg.dev

            - name: "Download stg.tfstate"
              run: |
                  gsutil cp gs://${{secrets.TERRAFORM_TFSTATE_BUCKET}}/stg.tfstate ./terraform.tfstate

            - name: "Copy variables.tf"
              env:
                  PROJECT_ID: ${{secrets.PROJECT_ID}}
                  REGION: ${{secrets.REGION}}
                  ENV: "stg"
              run: |
                  echo "project_id = \"$PROJECT_ID\"" > ./terraform.tfvars
                  echo "region = \"$REGION\"" >> ./terraform.tfvars
                  echo "env = \"$ENV\"" >> ./terraform.tfvars

            - name: "Plan"
              id: "plan"
              run: |
                  terraform init
                  terraform plan

    add-comment-to-pr:
        runs-on: ubuntu-latest
        needs:
            - chrome-extension-build
            - gcp-apply-new
            - plan-stg
        if: always()
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        steps:
            - name: "Create Comment Body File For Success"
              if: |
                  needs.chrome-extension-build.outputs.is-success == 'success' &&
                  needs.gcp-apply-new.outputs.is-success == 'success' &&
                  needs.plan-stg.outputs.is-success == 'success'
              run: |
                  cat << EOF > pr_comment.md
                  ## PR Test Pipeline Success
                  Github Actions Log: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
                  EOF

            - name: "Create Comment Body File For Failure"
              if: |
                  needs.chrome-extension-build.outputs.is-success == 'failure' ||
                  needs.gcp-apply-new.outputs.is-success == 'failure' ||
                  needs.plan-stg.outputs.is-success == 'failure'
              run: |
                  cat << EOF > pr_comment.md
                  ## PR Test Pipeline Failed
                  Github Actions Log: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
                  EOF

            - name: "Add Comment To PR"
              if: always()
              run: |
                  cat pr_comment.md
                  gh pr comment --body-file pr_comment.md "${{github.event.pull_request.html_url}}"
