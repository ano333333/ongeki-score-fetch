name: Build and Release

on:
    push:
        branches:
            - "release"

jobs:
    upload-chrome-extension-release:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./chrome-extension
        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "21"

            - name: Install dependencies and build
              run: |
                  npm install
                  npm run build

            - name: Zip dist directory
              run: |
                  cd dist
                  zip -r ../dist.zip .

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: release-${{ github.run_id }}
                  release_name: "Release: ${{ github.event.head_commit.timestamp }}"
                  body: ${{ github.event.head_commit.message }}
                  draft: false
                  prerelease: false

            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./dist.zip
                  asset_name: ongeki-score-fetch-${{ github.run_id }}.zip
                  asset_content_type: application/zip

    apply-terraform:
        permissions:
            id-token: write
            contents: read
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./gcp
        steps:
            - name: "Checkout"
              uses: actions/checkout@v3

            - id: "gcp-auth"
              name: "Authenticate to GCP"
              uses: "google-GitHub-actions/auth@v1"
              with:
                  create_credentials_file: true
                  workload_identity_provider: ${{secrets.WORKLOAD_IDENTITY_PROVIDER}}
                  service_account: ${{secrets.SERVICE_ACCOUNT_EMAIL}}

            - name: "Activate GCP Service Account"
              run: |
                  gcloud auth login --cred-file=$GOOGLE_APPLICATION_CREDENTIALS

            - name: "Configure Docker to use GCP Artifact Registry"
              run: |
                  gcloud auth configure-docker ${{secrets.REGION}}-docker.pkg.dev

            - name: "Download prd.tfstate"
              run: |
                  gsutil cp gs://${{secrets.TERRAFORM_TFSTATE_BUCKET}}/prd.tfstate ./terraform.tfstate

            - name: "Copy variables.tf"
              env:
                  PROJECT_ID: ${{secrets.PROJECT_ID}}
                  REGION: ${{secrets.REGION}}
                  ENV: "prd"
              run: |
                  echo "project_id = \"$PROJECT_ID\"" > ./terraform.tfvars
                  echo "region = \"$REGION\"" >> ./terraform.tfvars
                  echo "env = \"$ENV\"" >> ./terraform.tfvars

            - name: "Copy sheet-scraper/.env"
              env:
                  FILE_CONTENT: ${{secrets.SHEET_SCRAPER_ENV}}
              run: |
                  echo "$FILE_CONTENT" > ./sheet-scraper/.env

            - name: "Apply"
              run: |
                  terraform init
                  terraform validate
                  terraform apply -auto-approve

            - name: "Upload prd.tfstate"
              if: always()
              run: |
                  gsutil cp terraform.tfstate gs://${{secrets.TERRAFORM_TFSTATE_BUCKET}}/prd.tfstate
